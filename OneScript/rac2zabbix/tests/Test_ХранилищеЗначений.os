#Использовать asserts
#Использовать v8find
#Использовать reflector

#Использовать ".."

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт

    ЮнитТестирование = Неопределено;

    ВсеТесты = Новый Массив;    

    ВсеТесты.Добавить("ТестДолжен_ПроверитьНаличиеИнтерфейса");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьИнициализациюХранилищаЗначений");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьИмяВнутреннейТаблицы");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьВставкуСтрокВХранилищеЗначений");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьИзвлечениеДанных");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьКорректностьКонфигурированияХранилищаЗначений");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьФункциюВычислитьЗначение");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьВставкуПустойЗаписи");
    ВсеТесты.Добавить("ТестДолжен_ПроверитьЗначенияПолейПоУмолчанию");

    Возврат ВсеТесты;

КонецФункции 

Процедура ПередЗапускомТеста() Экспорт

КонецПроцедуры
 
Процедура ПослеЗапускаТеста() Экспорт

КонецПроцедуры

Процедура ТестДолжен_ПроверитьНаличиеИнтерфейса() Экспорт

    Хранилище = Новый ХранилищеЗначений;

    РасширенныйРефлектор = Новый РефлекторОбъекта(Хранилище);

    ЕстьПроцедура_ДобавитьСтроку = РасширенныйРефлектор.ЕстьПроцедура("ДобавитьСтроку", 1);
    ЕстьФункция_ВычислитьЗначение = РасширенныйРефлектор.ЕстьФункция("ВычислитьЗначение", 2);
    ЕстьФункция_ПоляХранилищаЗначений = РасширенныйРефлектор.ЕстьФункция("ПоляХранилищаЗначений");
    ЕстьФункция_ВыполнитьЗапрос = РасширенныйРефлектор.ЕстьФункция("ВыполнитьЗапрос", 2);
    ЕстьФункция_ИзвлечьВсе = РасширенныйРефлектор.ЕстьФункция("ИзвлечьВсе");
    ЕстьФункция_ПустаяСтрокаХранилища = РасширенныйРефлектор.ЕстьФункция("ПустаяСтрокаХранилища");
    ЕстьФункция_ИмяХранилищаЗначений = РасширенныйРефлектор.ЕстьФункция("ИмяХранилищаЗначений");

    Ожидаем.Что(ЕстьПроцедура_ДобавитьСтроку, "ЕстьПроцедура_ДобавитьСтроку").ЕстьИстина();
    Ожидаем.Что(ЕстьФункция_ВычислитьЗначение, "ЕстьФункция_ВычислитьЗначение").ЕстьИстина();
    Ожидаем.Что(ЕстьФункция_ПоляХранилищаЗначений, "ЕстьФункция_ПоляХранилищаЗначений").ЕстьИстина();
    Ожидаем.Что(ЕстьФункция_ВыполнитьЗапрос, "ЕстьФункция_ВыполнитьЗапрос").ЕстьИстина();
    Ожидаем.Что(ЕстьФункция_ИзвлечьВсе, "ЕстьФункция_ИзвлечьВсе").ЕстьИстина();
    Ожидаем.Что(ЕстьФункция_ПустаяСтрокаХранилища, "ЕстьФункция_ПустаяСтрокаХранилища").ЕстьИстина();
    Ожидаем.Что(ЕстьФункция_ИмяХранилищаЗначений, "ЕстьФункция_ИмяХранилищаЗначений").ЕстьИстина();

КонецПроцедуры

Процедура ТестДолжен_ПроверитьИнициализациюХранилищаЗначений() Экспорт

    Хранилище = Новый ХранилищеЗначений;

    ИмяТаблицы = Хранилище.ИмяХранилищаЗначений();
    ПустаяСтрока = Хранилище.ПустаяСтрокаХранилища();
    ПоляТаблицы = Хранилище.ПоляХранилищаЗначений();
    КоличествоСовпадает = ПустаяСтрока.Количество() = ПоляТаблицы.Количество();

    Ожидаем.Что(ИмяТаблицы, "Ожидаем, что имя таблицы создано").Заполнено();
    Ожидаем.Что(ПоляТаблицы, "Ожидаем, что поля таблицы есть массив").ИмеетТип("Массив");
    Ожидаем.Что(ПоляТаблицы.Количество(), "Ожидаем, что количество полей таблицы больше нуля").Больше(0);
    Ожидаем.Что(ПустаяСтрока, "Ожидаем, что пустая строка таблицы").ИмеетТип("Структура");
    Ожидаем.Что(КоличествоСовпадает, "Ожидаем, что количество колонок таблицы и пустой строки совпадают").ЕстьИстина();

КонецПроцедуры

Процедура ТестДолжен_ПроверитьИмяВнутреннейТаблицы() Экспорт

    Хранилище = Новый ХранилищеЗначений;
    
    ТекстЗапроса = "SELECT tbl_name FROM sqlite_master";
    Результат = Хранилище.ВыполнитьЗапрос(ТекстЗапроса);

    Ожидаем.Что(Результат, "Ожидаем, что результат является массивом").ИмеетТип("Массив");
    Ожидаем.Что(Результат, "Ожидаем, что результат является массивом").ИмеетДлину(1);

    Выборка = Результат[0];
    Ожидаем.Что(Выборка, "Ожидаем, что имя таблицы верное").Содержит(Хранилище.ИмяХранилищаЗначений());

КонецПроцедуры

Процедура ТестДолжен_ПроверитьВставкуСтрокВХранилищеЗначений() Экспорт

    Хранилище = Новый ХранилищеЗначений;

    Строка_1 = Новый Структура("key", "Ключ");
    Строка_2 = Новый Структура("value", "Значение");

    Хранилище.ДобавитьСтроку(Строка_1);
    Хранилище.ДобавитьСтроку(Строка_2);

    Результат = Хранилище.ИзвлечьВсе();

    Ожидаем.Что(Результат, "Ожидаем, что результат запроса есть массив").ИмеетТип("Массив");
    Ожидаем.Что(Результат, "Ожидаем, что результат запроса содержит два элемента").ИмеетДлину(2);

    Хранилище = Новый ХранилищеЗначений;
    Строка_1 = Новый Структура("несуществующее_поле", "1");
    Хранилище.ДобавитьСтроку(Строка_1);

    Результат = Хранилище.ИзвлечьВсе();

    Ожидаем.Что(Результат, "Ожидаем, что результат запроса есть массив").ИмеетТип("Массив");
    Ожидаем.Что(Результат, "Ожидаем, что результат запроса содержит два элемента").ИмеетДлину(1);
    Ожидаем.Что(Результат[0].Key, "Ожидаем, что поле пустое").Равно("");
    Ожидаем.Что(Результат[0].Value, "Ожидаем, что поле пустое").Равно("");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьИзвлечениеДанных() Экспорт

    Хранилище = Новый ХранилищеЗначений;

    Строка_1 = Новый Структура("key", "ключ_1");
    Строка_2 = Новый Структура("value", "значение_2");

    Хранилище.ДобавитьСтроку(Строка_1);
    Хранилище.ДобавитьСтроку(Строка_2);


    ТекстЗапроса = СтрШаблон("SELECT * FROM ###");
    Результат = Хранилище.ВыполнитьЗапрос(ТекстЗапроса);

    Ожидаем.Что(Результат, "Ожидаем, что результат запроса есть массив").ИмеетТип("Массив");
    Ожидаем.Что(Результат, "Ожидаем, что результат запроса содержит два элемента").ИмеетДлину(2);


    ТекстЗапроса = СтрШаблон("SELECT * FROM ### WHERE key = 'ключ_1'");
    Результат = Хранилище.ВыполнитьЗапрос(ТекстЗапроса);

    Ожидаем.Что(Результат, "Ожидаем, что результат запроса есть массив").ИмеетТип("Массив");
    Ожидаем.Что(Результат, "Ожидаем, что результат запроса содержит один элемент").ИмеетДлину(1);
    Ожидаем.Что(Результат[0], "Ожидаем, что строка результата запроса имеет тип - Структура").ИмеетТип("Структура");
    Ожидаем.Что(Результат[0], "Ожидаем, что количество полей строки результата запроса 2").ИмеетДлину(2);
    Ожидаем.Что(Результат[0].key, "Ожидаем, что значение верное").Равно("ключ_1");


    ТекстЗапроса = СтрШаблон("SELECT * FROM ### WHERE value = @value");
    ПараметрыЗапроса = Новый Структура("value", "значение_2");
    Результат = Хранилище.ВыполнитьЗапрос(ТекстЗапроса, ПараметрыЗапроса);

    Ожидаем.Что(Результат, "Ожидаем, что результат запроса есть массив").ИмеетТип("Массив");
    Ожидаем.Что(Результат, "Ожидаем, что результат запроса содержит один элемент").ИмеетДлину(1);
    Ожидаем.Что(Результат[0].value, "Ожидаем, что значение верное").Равно("значение_2");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьКорректностьКонфигурированияХранилищаЗначений() Экспорт
    
    ХранилищеПоУмолчанию = Новый ХранилищеЗначений;
    ПоляТаблицы = ХранилищеПоУмолчанию.ПоляХранилищаЗначений();

    Ожидаем.Что(ПоляТаблицы, "Ожидаем, что поля таблицы по умолчанию - массив").ИмеетТип("Массив");
    Ожидаем.Что(ПоляТаблицы.Количество(), "Ожидаем, что таблица полей по умолчанию заполнена").Больше(0);

    ОписаниеТаблицы = Новый Массив;
    ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "Поле_1", "TEXT DEFAULT('')"));
    ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "Поле_2", "INTEGER DEFAULT(0)"));

    Хранилище = Новый ХранилищеЗначений(ОписаниеТаблицы);
    ПоляТаблицы = Хранилище.ПоляХранилищаЗначений();

    Ожидаем.Что(ПоляТаблицы, "Ожидаем, что поля сконфигурированной таблицы - массив").ИмеетТип("Массив");
    Ожидаем.Что(ПоляТаблицы.Количество(), "Ожидаем, что количество полей сконфигурированной таблицы - 2").Равно(2);

    Строка_1 = Новый Структура("Поле_1", "1");
    Строка_2 = Новый Структура("Поле_2", 2);

    Хранилище.ДобавитьСтроку(Строка_1);
    Хранилище.ДобавитьСтроку(Строка_2);

    Результат = Хранилище.ВыполнитьЗапрос("SELECT * FROM ###");

    Ожидаем.Что(Результат, "Ожидаем, что результат запроса есть массив").ИмеетТип("Массив");
    Ожидаем.Что(Результат, "Ожидаем, что результат запроса содержит два элемента").ИмеетДлину(2);
    Ожидаем.Что(Результат[0].Поле_1, "Ожидаем, что поле имеет значение '1'").Равно("1");
    Ожидаем.Что(Результат[0].Поле_2, "Ожидаем, что поле имеет значение 0").Равно(0);
    Ожидаем.Что(Результат[1].Поле_1, "Ожидаем, что поле имеет значение ''").Равно("");
    Ожидаем.Что(Результат[1].Поле_2, "Ожидаем, что поле имеет значение 2").Равно(2);

КонецПроцедуры

Процедура ТестДолжен_ПроверитьФункциюВычислитьЗначение() Экспорт

    ОписаниеТаблицы = Новый Массив;
    ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "Поле_1", "TEXT DEFAULT('')"));
    ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "Поле_2", "INTEGER DEFAULT(0)"));
    ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "Поле_3", "REAL"));

    Хранилище = Новый ХранилищеЗначений(ОписаниеТаблицы);

    Строка_1 = Новый Структура("Поле_1, Поле_2, Поле_3", "Вова", 10, 0.5);
    Строка_2 = Новый Структура("Поле_1, Поле_2, Поле_3", "Маша", 20, 10.5);
    Строка_3 = Новый Структура("Поле_1, Поле_2, Поле_3", "Витя", 30, 20.83457);

    Хранилище.ДобавитьСтроку(Строка_1);
    Хранилище.ДобавитьСтроку(Строка_2);
    Хранилище.ДобавитьСтроку(Строка_3);

    Результат = Хранилище.ВычислитьЗначение("SELECT MAX(Поле_2) FROM ###");
    Ожидаем.Что(Результат, "Ожидаем, что результат запроса есть число").ИмеетТип("Число");
    Ожидаем.Что(Результат, "Ожидаем, что поле имеет значение 30").Равно(30);

    Результат = Хранилище.ВычислитьЗначение("SELECT MAX(Поле_1) FROM ###");
    Ожидаем.Что(Результат, "Ожидаем, что результат запроса есть строка").ИмеетТип("Строка");
    Ожидаем.Что(Результат, "Ожидаем, что поле имеет значение Маша").Равно("Маша");

    Результат = Хранилище.ВычислитьЗначение("SELECT MAX(Поле_3) FROM ###");
    Сообщить(Результат);
    Ожидаем.Что(Результат, "Ожидаем, что результат запроса есть строка").ИмеетТип("Число");
    Ожидаем.Что(Результат, "Ожидаем, что поле имеет значение 20.83457").Равно(20.83457);

    Попытка
        Результат = Хранилище.ВычислитьЗначение("SELECT * FROM ###");
    Исключение
        ТекстИсключения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
    КонецПопытки;
    Ожидаем.Что(ТекстИсключения, "Ошибка когда результат запроса не скаляр").Заполнено();
    Ожидаем.Что(ТекстИсключения, "не верный тип исключения").Равно("результат запроса не является скаляром");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьВставкуПустойЗаписи() Экспорт

    ОписаниеТаблицы = Новый Массив;
    ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "Поле_1", "TEXT DEFAULT('000-000-00')"));
    ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "Поле_2", "INTEGER DEFAULT(555)"));
    ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "Поле_3", "TEXT"));
    ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "Поле_4", "INTEGER"));
    ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "Поле_5", "NUMERIC"));

    Хранилище = Новый ХранилищеЗначений(ОписаниеТаблицы);

    ПустаяЗапись = Новый Структура;
    Хранилище.ДобавитьСтроку(ПустаяЗапись);

    Результат = Хранилище.ВыполнитьЗапрос("SELECT * FROM ###");

    Ожидаем.Что(Результат, "Ожидаем, что результат запроса есть массив").ИмеетТип("Массив");
    Ожидаем.Что(Результат, "Ожидаем, что результат запроса содержит два элемента").ИмеетДлину(1);
    Ожидаем.Что(Результат[0].Поле_1, "Ожидаем, что поле имеет значение '000-000-00'").Равно("000-000-00");
    Ожидаем.Что(Результат[0].Поле_2, "Ожидаем, что поле имеет значение 555").Равно(555);
    Ожидаем.Что(Результат[0].Поле_3, "Ожидаем, что поле имеет значение ''").Равно("");
    Ожидаем.Что(Результат[0].Поле_4, "Ожидаем, что поле имеет значение 0").Равно(0);
    Ожидаем.Что(Результат[0].Поле_5, "Ожидаем, что поле имеет значение 0").Равно(0);
    
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗначенияПолейПоУмолчанию() Экспорт

    ОписаниеТаблицы = Новый Массив;
    Хранилище = Новый ХранилищеЗначений();

    ТипПоля = "TEXT";
    ЗначениеПоУмолчанию = Хранилище.ЗначениеПоляПоУмолчанию(ТипПоля);
    Ожидаем.Что(ЗначениеПоУмолчанию, "Значение по умолчанию - пустая строка").Равно("");

    ТипПоля = "TEXT DEFAULT('0000-000-1')";
    ЗначениеПоУмолчанию = Хранилище.ЗначениеПоляПоУмолчанию(ТипПоля);
    Ожидаем.Что(ЗначениеПоУмолчанию, "Значение по умолчанию - '0000-000-1'").Равно("0000-000-1");

    ТипПоля = "INTEGER";
    ЗначениеПоУмолчанию = Хранилище.ЗначениеПоляПоУмолчанию(ТипПоля);
    Ожидаем.Что(ЗначениеПоУмолчанию, "Значение по умолчанию - 0").Равно("0");

    ТипПоля = "INTEGER DEFAULT(10)";
    ЗначениеПоУмолчанию = Хранилище.ЗначениеПоляПоУмолчанию(ТипПоля);
    Ожидаем.Что(ЗначениеПоУмолчанию, "Значение по умолчанию - 10").Равно("10");

КонецПроцедуры