#Использовать 1commands
#Использовать json

Процедура ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров) Экспорт
	
	ПарсерАргументов = Неопределено; // чтобы linter не ругался

	Вывод = ЗапроситьRACДанныеПроцессовКластера(ЗначенияПараметров);

	ТаблицаКластеров = ПодготовитьТаблицуДанныхПроцессовКластера();
	ОбщегоНазначения.ЗаполнитьТаблицуДаннымиПотока(ТаблицаКластеров, Вывод);

	ИтоговыеДанныеСтрокой = ЗаполнитьДанныеПроцессовКластера(ТаблицаКластеров);

	Сообщить(ИтоговыеДанныеСтрокой);
	
КонецПроцедуры

Процедура ОписаниеКоманды(ПарсерКоманднойСтроки) Экспорт
	
	ИмяКоманды = "processes";

	Команда = ПарсерКоманднойСтроки.ОписаниеКоманды(ИмяКоманды, "Получает динамические характеристики процессов на кластере");

	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-host", "адрес службы RAS (default: localhost))");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-port", "порт службы RAS (default: 1545))");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-cluster", "идентификатор кластера");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-user", "пользователь администратор кластера серверов");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-password", "пароль пользователя администратора кластера серверов");

	ПарсерКоманднойСтроки.ДобавитьКоманду(Команда);
	
КонецПроцедуры

Функция ЗапроситьRACДанныеПроцессовКластера(ЗначенияПараметров)
	
	ПутьКRAC = ОбщегоНазначения.ПутьКRAC("8.3");
	Хост = ЗначенияПараметров.Получить("-host");
	Порт = ЗначенияПараметров.Получить("-port");
	ИдентификаторКластера = ЗначенияПараметров.Получить("-cluster");
	Пользователь = ЗначенияПараметров.Получить("-user");
	Пароль = ЗначенияПараметров.Получить("-password");
	
	СтрокаЗапуска = СтрШаблон("""%1"" %2:%3 process list --cluster=%4 --cluster-user=%5 --cluster-pwd=%6",
		ПутьКRAC, Хост, Порт, ИдентификаторКластера, Пользователь, Пароль);
	
	
	Команда = Новый Команда;
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	Команда.УстановитьСтрокуЗапуска(ОбщегоНазначения.UTF8(СтрокаЗапуска));
	Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);

	КодВозврата = Команда.Исполнить();
	Вывод = СокрЛП(Команда.ПолучитьВывод());

	Если КодВозврата <> 0 Тогда
		ВызватьИсключение Вывод;
	КонецЕсли;

	Возврат Вывод;

КонецФункции

Функция ПодготовитьТаблицуДанныхПроцессовКластера()
	
	ОписаниеТаблицы = ОписаниеТаблицыДанныхПроцессовКластера();

	ТаблицаКластеров = Новый ХранилищеЗначений(ОписаниеТаблицы);

	Возврат ТаблицаКластеров;

КонецФункции

Функция ОписаниеТаблицыДанныхПроцессовКластера()
	
	ОписаниеТаблицы = Новый Массив;

	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "process", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "host", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "port", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "pid", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "is_enable", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "running", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "started_at", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "use", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "available_perfomance", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "capacity", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "connections", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "memory_size", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "memory_excess_time", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "selection_size", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "avg_call_time", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "avg_db_call_time", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "avg_lock_call_time", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "avg_server_call_time", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "avg_threads", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "reserve", "INTEGER DEFAULT(0)"));

	Возврат ОписаниеТаблицы;

КонецФункции

Функция ЗаполнитьДанныеПроцессовКластера(ТаблицаКластеров)

	ИтоговыеДанные = Новый Структура;

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT SUM(memory_size * 1024) FROM ###");
	ИтоговыеДанные.Вставить("MEMORY", ТекущееЗначение);

	ИтоговыеДанные.Вставить("ERRORMSG", "");

	Парсер = Новый ПарсерJSON;
	Результат = Парсер.ЗаписатьJSON(ИтоговыеДанные);

	Возврат Результат;
	
КонецФункции