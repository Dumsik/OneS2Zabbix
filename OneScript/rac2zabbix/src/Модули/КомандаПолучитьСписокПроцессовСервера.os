#Использовать 1commands
#Использовать json

Процедура ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров) Экспорт
	
	ПарсерАргументов = Неопределено; // чтобы linter не ругался

	// получим соответствие идентификаторов баз их наименованиям
	Вывод = ЗапроситьRACСписокБазКластера(ЗначенияПараметров);
	ТаблицаИнформационныхБаз = ПодготовитьТаблицуИнформационныхБаз();
	ОбщегоНазначения.ЗаполнитьТаблицуДаннымиПотока(ТаблицаИнформационныхБаз, Вывод);
	ИдентификаторыБаз = ИдентификаторыБазКластера(ТаблицаИнформационныхБаз);
	
	Вывод = ЗапроситьRACСписокПроцессовКластера(ЗначенияПараметров);
	ТаблицаКластеров = ПодготовитьТаблицуДанныхПроцессов();
	ОбщегоНазначения.ЗаполнитьТаблицуДаннымиПотока(ТаблицаКластеров, Вывод);

	ИмяСервера = ЗначенияПараметров.Получить("-agent-host");
	ДанныеПроцессов = ЗаполнитьСвойстваПроцессаКластера(ТаблицаКластеров, ИмяСервера);

	Вывод = ЗапроситьRACСписокСеансовИнформационныхБаз(ЗначенияПараметров);
	ТаблицаСеансов = ПодготовитьТаблицуСеансовыхДанных();
	ОбщегоНазначения.ЗаполнитьТаблицуДаннымиПотока(ТаблицаСеансов, Вывод);

	СписокСеансовПроцесса = ПолучитьСеансыСОтборомПоПроцессу(ТаблицаСеансов, ДанныеПроцессов.PROCESS_ID_MAX_MEMORY);
	// заменим идентификаторы баз их наименованием
	Для Каждого ТекущийСеанс Из СписокСеансовПроцесса Цикл
		ТекущийСеанс.INFOBASE = ИдентификаторыБаз.Получить(ТекущийСеанс.INFOBASE);
	КонецЦикла;

	ДанныеПроцессов.Вставить("SESSIONS", СписокСеансовПроцесса);

	Парсер = Новый ПарсерJSON;
	Результат = Парсер.ЗаписатьJSON(ДанныеПроцессов);

	Сообщить(Результат);
	
КонецПроцедуры

Процедура ОписаниеКоманды(ПарсерКоманднойСтроки) Экспорт
	
	ИмяКоманды = "process-list";

	Команда = ПарсерКоманднойСтроки.ОписаниеКоманды(ИмяКоманды, "возвращает динамические характеристики процессов");

	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-host", "адрес службы RAS (default: localhost))");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-port", "порт службы RAS (default: 1545))");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-cluster", "идентификатор кластера");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-agent-host", "имя сервера");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-user", "пользователь администратор кластера серверов");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-password", "пароль пользователя администратора кластера серверов");

	ПарсерКоманднойСтроки.ДобавитьКоманду(Команда);
	
КонецПроцедуры

Функция ЗапроситьRACСписокПроцессовКластера(ЗначенияПараметров)
	
	ПутьКRAC = ОбщегоНазначения.ПутьКRAC("8.3");
	Хост = ЗначенияПараметров.Получить("-host");
	Порт = ЗначенияПараметров.Получить("-port");
	ИдентификаторКластера = ЗначенияПараметров.Получить("-cluster");
	Пользователь = ЗначенияПараметров.Получить("-user");
	Пароль = ЗначенияПараметров.Получить("-password");
	
	СтрокаЗапуска = СтрШаблон("""%1"" %2:%3 process list --cluster=%4 --cluster-user=%5 --cluster-pwd=%6", 
		ПутьКRAC, Хост, Порт, ИдентификаторКластера, Пользователь, Пароль);
	
	Команда = Новый Команда;
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	Команда.УстановитьСтрокуЗапуска(ОбщегоНазначения.UTF8(СтрокаЗапуска));
	КодВозврата = Команда.Исполнить();
	Вывод = СокрЛП(Команда.ПолучитьВывод());

	Если КодВозврата <> 0 Тогда
		ВызватьИсключение Вывод;
	КонецЕсли;

	Возврат Вывод;

КонецФункции

Функция ЗапроситьRACСписокСеансовИнформационныхБаз(ЗначенияПараметров)

	ПутьКRAC = ОбщегоНазначения.ПутьКRAC("8.3");
	Хост = ЗначенияПараметров.Получить("-host");
	Порт = ЗначенияПараметров.Получить("-port");
	ИдентификаторКластера = ЗначенияПараметров.Получить("-cluster");
	Пользователь = ЗначенияПараметров.Получить("-user");
	Пароль = ЗначенияПараметров.Получить("-password");
	
	СтрокаЗапуска = СтрШаблон("""%1"" %2:%3 session list --cluster=%4 --cluster-user=%5 --cluster-pwd=%6", 
		ПутьКRAC, Хост, Порт, ИдентификаторКластера, Пользователь, Пароль);
	
	Команда = Новый Команда;
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	Команда.УстановитьСтрокуЗапуска(ОбщегоНазначения.UTF8(СтрокаЗапуска));
	КодВозврата = Команда.Исполнить();
	Вывод = СокрЛП(Команда.ПолучитьВывод());

	Если КодВозврата <> 0 Тогда
		ВызватьИсключение Вывод;
	КонецЕсли;

	Возврат Вывод;

КонецФункции

Функция ЗапроситьRACСписокБазКластера(ЗначенияПараметров)	

	ПутьКRAC = ОбщегоНазначения.ПутьКRAC("8.3");
	Хост = ЗначенияПараметров.Получить("-host");
	Порт = ЗначенияПараметров.Получить("-port");
	Пользователь = ЗначенияПараметров.Получить("-user");
	Пароль = ЗначенияПараметров.Получить("-password");
	ИдентификаторКластера = ЗначенияПараметров.Получить("-cluster");
	
	СтрокаЗапуска = СтрШаблон("""%1"" %2:%3 infobase summary list --cluster=%4 --cluster-user=%5 --cluster-pwd=%6",
		ПутьКRAC, Хост, Порт, ИдентификаторКластера, Пользователь, Пароль);
	
	Команда = Новый Команда;
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	Команда.УстановитьСтрокуЗапуска(ОбщегоНазначения.UTF8(СтрокаЗапуска));
	Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);
	
	КодВозврата = Команда.Исполнить();
	Вывод = СокрЛП(Команда.ПолучитьВывод());

	Если КодВозврата <> 0 Тогда
		ВызватьИсключение Вывод;
	КонецЕсли;

	Возврат Вывод;

КонецФункции

Функция ПодготовитьТаблицуДанныхПроцессов()
	
	ОписаниеТаблицы = ОписаниеТаблицыДанныхПроцессов();

	ТаблицаКластеров = Новый ХранилищеЗначений(ОписаниеТаблицы);

	Возврат ТаблицаКластеров;

КонецФункции

Функция ПодготовитьТаблицуСеансовыхДанных()
	
	ОписаниеТаблицы = ОписаниеТаблицыСеансовыхДанных();

	ТаблицаКластеров = Новый ХранилищеЗначений(ОписаниеТаблицы);

	Возврат ТаблицаКластеров;

КонецФункции

Функция ПодготовитьТаблицуИнформационныхБаз()
	
	ОписаниеТаблицы = ОписаниеТаблицыИнформационныхБаз();

	ТаблицаКластеров = Новый ХранилищеЗначений(ОписаниеТаблицы);

	Возврат ТаблицаКластеров;

КонецФункции

Функция ОписаниеТаблицыДанныхПроцессов()
	
	ОписаниеТаблицы = Новый Массив;

	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "process", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "host", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "port", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "pid", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "is_enable", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "running", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "started_at", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "use", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "available_perfomance", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "capacity", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "connections", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "memory_size", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "memory_excess_time", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "selection_size", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "avg_call_time", "REAL DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "avg_db_call_time", "REAL DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "avg_lock_call_time", "REAL DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "avg_server_call_time", "REAL DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "avg_threads", "REAL DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "reserve", "INTEGER DEFAULT(0)"));

	Возврат ОписаниеТаблицы;

КонецФункции

Функция ОписаниеТаблицыСеансовыхДанных()
	
	ОписаниеТаблицы = Новый Массив;

	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "session", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "session_id", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "infobase", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "connection", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "process", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "user_name", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "host", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "app_id", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "locale", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "started_at", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "last_active_at", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "hibernate", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "passive_session_hibernate_time", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "hibernate_session_terminate_time", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "blocked_by_dbms", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "blocked_by_ls", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "bytes_all", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "bytes_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "calls_all", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "calls_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "dbms_bytes_all", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "dbms_bytes_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "db_proc_info", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "db_proc_took", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "db_proc_took_at", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_all", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_all_dbms", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_current", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_current_dbms", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_last_5min_dbms", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "memory_current", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "memory_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "memory_total", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "read_current", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "read_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "read_total", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "write_current", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "write_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "write_total", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_current_service", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_last_5min_service", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_all_service", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "current_service_name", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "cpu_time_current", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "cpu_time_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "cpu_time_total", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "data_separation", "TEXT DEFAULT('')"));

	Возврат ОписаниеТаблицы;

КонецФункции

Функция ОписаниеТаблицыИнформационныхБаз()

	ОписаниеТаблицы = Новый Массив;

	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "infobase", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "name", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "descr", "TEXT DEFAULT('')"));

	Возврат ОписаниеТаблицы;
	
КонецФункции

Функция ЗаполнитьСвойстваПроцессаКластера(ТаблицаКластеров, ИмяСервера)

	ИтоговыеДанные = Новый Структура;

	Отбор = Новый Структура("host", ИмяСервера);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT SUM(memory_size * 1024) FROM ### WHERE host=@host", Отбор);
	ИтоговыеДанные.Вставить("MEMORY", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT 
		|	avg_lock_call_time
		|FROM ###
		|WHERE host=@host
		|ORDER BY avg_lock_call_time DESC
		|LIMIT 1", Отбор);
	
	// Грязный хак для обхода ошибки библиотеки sql. Значение типа real возвращается
	// строкой в некорректном числовом формате. Пример: число 5.25 вернется из sqlite
	// базы как строка "5,25". Это некорректное представление 64 битного числа. В
	// причине ошибки не разобрался, возможно дело в текущей локали.
	Если ТипЗнч(ТекущееЗначение) = Тип("Строка") Тогда
		Если ЗначениеЗаполнено(СокрЛП(ТекущееЗначение)) Тогда
			Попытка
				ТекущееЗначение = Число(СтрЗаменить(ТекущееЗначение, ",", "."));
			Исключение
				ТекущееЗначение = 0;
			КонецПопытки;
		Иначе
			ТекущееЗначение = 0;
		КонецЕсли;
	КонецЕсли;

	ИтоговыеДанные.Вставить("AVG_LOCK_CALL_TIME", ТекущееЗначение);

	РезультатЗапроса = ТаблицаКластеров.ВыполнитьЗапрос(
		"SELECT 
		|	MAX(memory_size * 1024) MAX_MEMORY, 
		|	pid PID_MAX_MEMORY, 
		|	process PROCESS_ID_MAX_MEMORY 
		|FROM ### 
		|WHERE host=@host", Отбор);
		
	ДанныеПроцесса = ?(РезультатЗапроса.Количество(), РезультатЗапроса[0], 
		Новый Структура("MAX_MEMORY, PID_MAX_MEMORY, PROCESS_ID_MAX_MEMORY", 0, "", ""));
	ИтоговыеДанные.Вставить("MAX_MEMORY", ДанныеПроцесса.MAX_MEMORY);
	ИтоговыеДанные.Вставить("PID_MAX_MEMORY", ДанныеПроцесса.PID_MAX_MEMORY);
	ИтоговыеДанные.Вставить("PROCESS_ID_MAX_MEMORY", ДанныеПроцесса.PROCESS_ID_MAX_MEMORY);
	ИтоговыеДанные.Вставить("ERRORMSG", "");

	Возврат ИтоговыеДанные;
	
КонецФункции

Функция ПолучитьСеансыСОтборомПоПроцессу(ТаблицаСеансов, ИдентификаторПроцесса)
	
	Отбор = Новый Структура("process", ИдентификаторПроцесса);

	РезультатЗапроса = ТаблицаСеансов.ВыполнитьЗапрос(
		"SELECT 
		|	infobase INFOBASE, 
		|	user_name USER, 
		|	host HOST,
		|	session_id SESSION,
		|	memory_current MEMORY_CURRENT,
		|	memory_total MEMORY_TOTAL 
		|FROM ### 
		|WHERE process=@process AND memory_current > 0
		|ORDER BY memory_current DESC, memory_total DESC LIMIT 5", Отбор);

	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИдентификаторыБазКластера(ТаблицаИнформационныхБаз)

	РезультатЗапроса = ТаблицаИнформационныхБаз.ВыполнитьЗапрос(
		"SELECT infobase ID, name NAME FROM ###");

	ИдентификаторыБаз = Новый Соответствие;

	Для Каждого ТекущееЗначение Из РезультатЗапроса Цикл
		ИдентификаторыБаз.Вставить(ТекущееЗначение.ID, ТекущееЗначение.NAME);
	КонецЦикла;

	Возврат ИдентификаторыБаз;
	
КонецФункции