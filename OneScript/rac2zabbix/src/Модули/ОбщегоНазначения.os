#Использовать logos
#Использовать tempfiles
#Использовать asserts
#Использовать strings
#Использовать 1commands
#Использовать v8find
#Использовать cmdline

Функция ПутьКRAC(Знач ВерсияПлатформы, Знач Исползовать64 = Истина) Экспорт

	Разрядность = ?(Исползовать64 = Истина, РазрядностьПлатформы.x64x86, РазрядностьПлатформы.x86x64);

	Если Лев(ВерсияПлатформы, 2) <> "8." Тогда
		ВызватьИсключение "Неверная версия платформы <"+ ВерсияПлатформы + ">";
	КонецЕсли;
	
	ПутьКRAC = Платформа1С.ПутьКRAC(ВерсияПлатформы, Разрядность);

	ФайлПлатформы = Новый Файл(ПутьКRAC);

	Если Не ФайлПлатформы.Существует() Тогда
		ВызватьИсключение "Нельзя установить несуществующий путь к платформе: " + ФайлПлатформы.ПолноеИмя;
	КонецЕсли;

	Возврат ПутьКRAC;

КонецФункции

Функция СформироватьОписаниеКоманд() Экспорт

	Парсер = Новый ПарсерАргументовКоманднойСтроки;

	КомандаПолучитьОписаниеИнфраструктуры.ОписаниеКоманды(Парсер);
	КомандаПолучитьСеансовыеДанные.ОписаниеКоманды(Парсер);
	КомандаДискавериСерверыКластера.ОписаниеКоманды(Парсер);
	КомандаПолучитьСписокПроцессовСервера.ОписаниеКоманды(Парсер);
	КомандаОбнаружениеКластеров.ОписаниеКоманды(Парсер);
	КомандаПолучитьДанныеПроцессовКластера.ОписаниеКоманды(Парсер);
	КомандаПолучитьСписокСеансовКластера.ОписаниеКоманды(Парсер);
	КомандаПолучитьСправку.ОписаниеКоманды(Парсер);

	Возврат Парсер;
	
КонецФункции

Процедура ВыполнитьКоманду(ПарсерАргументов, ПараметрыКоманднойСтроки) Экспорт

	Команда = ПараметрыКоманднойСтроки.Команда;
	ЗначенияПараметров = ПараметрыКоманднойСтроки.ЗначенияПараметров;

	Если Команда = ТипыКоманд.ПолучитьОписаниеИнфраструктуры Тогда
		КомандаПолучитьОписаниеИнфраструктуры.ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров);
	ИначеЕсли Команда = ТипыКоманд.ПолучитьСеансовыеДанные Тогда
		КомандаПолучитьСеансовыеДанные.ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров);
	ИначеЕсли Команда = ТипыКоманд.ДискавериСерверовКластера Тогда
		КомандаДискавериСерверыКластера.ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров);
	ИначеЕсли Команда = ТипыКоманд.ПолучитьСписокПроцессовСервера Тогда
		КомандаПолучитьСписокПроцессовСервера.ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров);
	ИначеЕсли Команда = ТипыКоманд.ПолучитьСписокКластеров Тогда
		КомандаОбнаружениеКластеров.ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров);
	ИначеЕсли Команда = ТипыКоманд.ПолучитьДанныеПроцессовКластера Тогда
		КомандаПолучитьДанныеПроцессовКластера.ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров);
	ИначеЕсли Команда = ТипыКоманд.ПолучитьДанныеСеансовКластера Тогда
		КомандаПолучитьСписокСеансовКластера.ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров);
	ИначеЕсли Команда = ТипыКоманд.Справка Тогда
		КомандаПолучитьСправку.ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров);
	Иначе
		ВызватьИсключение "команда не определена";
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьКавычки(Знач Строка) Экспорт
	
	Если СтрНачинаетсяС(Строка, """") И СтрЗаканчиваетсяНа(Строка, """") Тогда
		Строка = Сред(Строка, 2, СтрДлина(Строка) - 2);
	КонецЕсли;

	Возврат Строка;
	
КонецФункции

Функция РасшифроватьПотокДанных(Знач ТекстовыйПоток) Экспорт

	ТекстовыйПоток = СокрЛП(ТекстовыйПоток);
	Если НЕ ЗначениеЗаполнено(ТекстовыйПоток) Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ПотокМассивом = СтрРазделить(ТекстовыйПоток, Символы.ПС);

	КоличествоПолей = 0;
	Для Каждого ЭлементДанных Из ПотокМассивом Цикл
		ДанныеМассивом = СтрРазделить(ЭлементДанных, ":");
		Если ДанныеМассивом.Количество() < 2 Тогда
			Прервать;
		КонецЕсли;
		КоличествоПолей = КоличествоПолей + 1;
	КонецЦикла;

	Если КоличествоПолей = 0 Тогда
		ВызватьИсключение "некорректный формат входного потока данных";
	КонецЕсли;

	ОбработанныеДанные = Новый Массив;

	Индекс = 0;
	НоваяЗапись = Новый Структура;
	Для Каждого СтрокаПотока Из ПотокМассивом Цикл
		ДанныеМассивом = Новый Массив;
		ПозицияРазделителя = СтрНайти(СтрокаПотока, ":");
		Если ПозицияРазделителя > 0 Тогда
			ДанныеМассивом.Добавить(Сред(СтрокаПотока, 0, ПозицияРазделителя - 1));
			ДанныеМассивом.Добавить(Сред(СтрокаПотока, ПозицияРазделителя + 1, СтрДлина(СтрокаПотока)));
		КонецЕсли;
		Если ДанныеМассивом.Количество() = 2 Тогда
			Ключ = СокрЛП(СтрЗаменить(ДанныеМассивом[0], "-", "_"));
			Ключ = СтрЗаменить(Ключ, " ", "_"); // баг утилиты RAC: отсутствует "-" в имени поля "duration current-dbms"
			Значение = ОбщегоНазначения.УдалитьКавычки(СокрЛП(ДанныеМассивом[1]));
			НоваяЗапись.Вставить(Ключ, Значение);
		КонецЕсли;
		Если ДанныеМассивом.Количество() = 0 ИЛИ Индекс = ПотокМассивом.Количество() - 1 Тогда
			Если НоваяЗапись.Количество() Тогда
				ОбработанныеДанные.Добавить(НоваяЗапись);
			КонецЕсли;
			НоваяЗапись = Новый Структура;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;

	Возврат ОбработанныеДанные;
	
КонецФункции

Процедура ЗаполнитьТаблицуДаннымиПотока(ТаблицаКластеров, Поток) Экспорт
	
	РасшифровкаПотока = РасшифроватьПотокДанных(Поток);
	Если НЕ РасшифровкаПотока.Количество() Тогда
		РасшифровкаПотока.Добавить(Новый Структура);
	КонецЕсли;

	Для Каждого ТекущаяЗапись Из РасшифровкаПотока Цикл
		ТаблицаКластеров.ДобавитьСтроку(ТекущаяЗапись);
	КонецЦикла;

КонецПроцедуры

Функция UTF8(СтрокаЗапуска) Экспорт
	
	Возврат СтрШаблон("cmd /C @chcp 65001 > nul & %1", СтрокаЗапуска);

КонецФункции
