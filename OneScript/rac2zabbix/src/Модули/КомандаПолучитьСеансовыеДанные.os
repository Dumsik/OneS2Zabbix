#Использовать 1commands
#Использовать json

Процедура ВыполнитьКоманду(ПарсерАргументов, ЗначенияПараметров) Экспорт
	
	ПарсерАргументов = Неопределено; // чтобы linter не ругался

	Вывод = ЗапроситьRACСеансовыеДанные(ЗначенияПараметров);

	ТаблицаКластеров = ПодготовитьТаблицуСеансовыхДанных();
	ОбщегоНазначения.ЗаполнитьТаблицуДаннымиПотока(ТаблицаКластеров, Вывод);

	ИтоговыеДанные = ЗаполнитьСеансовыеДанные(ТаблицаКластеров);

	Сообщить(ИтоговыеДанные);
	
КонецПроцедуры

Процедура ОписаниеКоманды(ПарсерКоманднойСтроки) Экспорт
	
	ИмяКоманды = "infobase";

	Команда = ПарсерКоманднойСтроки.ОписаниеКоманды(ИмяКоманды, "Динамические характеристики информационных баз");

	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-host", "адрес службы RAS (default: localhost))");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-port", "порт службы RAS (default: 1545))");
		ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-cluster", "идентификатор кластера");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-infobase", "идентификатор информационной базы");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-user", "пользователь администратор кластера серверов");
	ПарсерКоманднойСтроки.ДобавитьИменованныйПараметрКоманды(Команда, 
		"-password", "пароль пользователя администратора кластера серверов");

	ПарсерКоманднойСтроки.ДобавитьКоманду(Команда);
	
КонецПроцедуры

Функция ЗапроситьRACСеансовыеДанные(ЗначенияПараметров)
	
	ПутьКRAC = ОбщегоНазначения.ПутьКRAC("8.3");
	Хост = ЗначенияПараметров.Получить("-host");
	Порт = ЗначенияПараметров.Получить("-port");
	ИдентификаторКластера = ЗначенияПараметров.Получить("-cluster");
	ИдентификаторБазы = ЗначенияПараметров.Получить("-infobase");
	Пользователь = ЗначенияПараметров.Получить("-user");
	Пароль = ЗначенияПараметров.Получить("-password");
	
	СтрокаЗапуска = СтрШаблон("""%1"" %2:%3 session list --cluster=%4 --infobase=%5 --cluster-user=%6 --cluster-pwd=%7", 
		ПутьКRAC, Хост, Порт, ИдентификаторКластера, ИдентификаторБазы, Пользователь, Пароль);
	
	Команда = Новый Команда;
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	Команда.УстановитьСтрокуЗапуска(ОбщегоНазначения.UTF8(СтрокаЗапуска));
	КодВозврата = Команда.Исполнить();
	Вывод = СокрЛП(Команда.ПолучитьВывод());

	Если КодВозврата <> 0 Тогда
		ВызватьИсключение Вывод;
	КонецЕсли;

	Возврат Вывод;

КонецФункции

Функция ПодготовитьТаблицуСеансовыхДанных()
	
	ОписаниеТаблицы = ОписаниеТаблицыСеансовыхДанных();

	ТаблицаКластеров = Новый ХранилищеЗначений(ОписаниеТаблицы);

	Возврат ТаблицаКластеров;

КонецФункции


Функция ОписаниеТаблицыСеансовыхДанных()
	
	ОписаниеТаблицы = Новый Массив;

	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "session", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "session_id", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "infobase", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "connection", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "process", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "user_name", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "host", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "app_id", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "locale", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "started_at", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "last_active_at", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "hibernate", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "passive_session_hibernate_time", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "hibernate_session_terminate_time", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "blocked_by_dbms", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "blocked_by_ls", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "bytes_all", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "bytes_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "calls_all", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "calls_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "dbms_bytes_all", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "dbms_bytes_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "db_proc_info", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "db_proc_took", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "db_proc_took_at", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_all", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_all_dbms", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_current", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_current_dbms", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_last_5min_dbms", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "memory_current", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "memory_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "memory_total", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "read_current", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "read_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "read_total", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "write_current", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "write_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "write_total", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_current_service", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_last_5min_service", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "duration_all_service", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "current_service_name", "TEXT DEFAULT('')"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "cpu_time_current", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "cpu_time_last_5min", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "cpu_time_total", "INTEGER DEFAULT(0)"));
	ОписаниеТаблицы.Добавить(Новый Структура("Имя, Тип", "data_separation", "TEXT DEFAULT('')"));

	Возврат ОписаниеТаблицы;

КонецФункции

Функция ЗаполнитьСеансовыеДанные(ТаблицаКластеров)

	ИтоговыеДанные = Новый Структура;

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT COUNT(*) FROM ### WHERE session != ''");
	ИтоговыеДанные.Вставить("SESSIONS", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT SUM(blocked_by_dbms) FROM ###");
	ИтоговыеДанные.Вставить("LOCK_BY_DBMS", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT SUM(blocked_by_ls) FROM ###");
	ИтоговыеДанные.Вставить("LOCK_BY_LS", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT COUNT(app_id) FROM ### WHERE app_id='BackgroundJob'");
	ИтоговыеДанные.Вставить("SESSIONS_BACKGROUND_JOB", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT COUNT(app_id) FROM ### WHERE app_id='1CV8C'");
	ИтоговыеДанные.Вставить("SESSIONS_THIN_CLIENT", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT COUNT(app_id) FROM ### WHERE app_id='1CV8'");
	ИтоговыеДанные.Вставить("SESSIONS_THICK_CLIENT", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT COUNT(app_id) FROM ### WHERE app_id='COMConnection'");
	ИтоговыеДанные.Вставить("SESSIONS_COM_CONNECTION", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT COUNT(app_id) FROM ### WHERE app_id='WSConnection'");
	ИтоговыеДанные.Вставить("SESSIONS_WEB_SERVICE", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT COUNT(app_id) FROM ### WHERE app_id='COMConsole'");
	ИтоговыеДанные.Вставить("SESSIONS_COM_CONSOLE", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT COUNT(app_id) FROM ### WHERE app_id='WebClient'");
	ИтоговыеДанные.Вставить("SESSIONS_WEB_CLIENT", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT COUNT(app_id) FROM ### 
		|WHERE app_id NOT IN 
		|('BackgroundJob', '1CV8C', '1CV8', 'COMConnection', 'WSConnection', 'COMConsole', 'WebClient')
		|	AND session != ''");
	ИтоговыеДанные.Вставить("SESSIONS_OTHER", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT MAX(duration_current)/1000 FROM ###");
	ИтоговыеДанные.Вставить("MAX_DURATION", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT MAX(duration_current_dbms)/1000 FROM ###");
	ИтоговыеДанные.Вставить("MAX_DURATION_DBMS", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT SUM(memory_current) FROM ###");
	ИтоговыеДанные.Вставить("MEMORY_TOTAL_SUM", ТекущееЗначение);

	ТекущееЗначение = ТаблицаКластеров.ВычислитьЗначение(
		"SELECT 'user: ' || user_name || ', session: ' || session_id || ', DBMS: ' || db_proc_info 
		|FROM ### ORDER BY memory_current DESC LIMIT 1");
	ИтоговыеДанные.Вставить("MAX_MEMORY_TOTAL_BY_SESSIONS", ТекущееЗначение);

	ИтоговыеДанные.Вставить("ERRORMSG", "");

	Парсер = Новый ПарсерJSON;
	Результат = Парсер.ЗаписатьJSON(ИтоговыеДанные);

	Возврат Результат;
	
КонецФункции